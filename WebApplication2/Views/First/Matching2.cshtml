@model WebApplication2.Models.Player

@{
    Layout = null;
}
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Memory Game</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="http://code.jquery.com/jquery-latest.min.js" type="text/javascript"></script>
    <link rel="stylesheet prefetch" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/css/font-awesome.min.css">
    <link rel="stylesheet prefetch" href="https://fonts.googleapis.com/css?family=Coda">
    <link rel="stylesheet prefetch" href="https://fonts.googleapis.com/css?family=Gloria+Hallelujah|Permanent+Marker">
    <link rel="stylesheet" href="~/Games/Mathcing/css/matching.css">
    <style>
        .close {
            position: absolute;
            top: 20px;
            right: 30px;
            transition: all 200ms;
            font-size: 30px;
            font-weight: bold;
            text-decoration: none;
            color: #333;
        }
        :root {
            --bg: #1a1e24;
            --color: indianred;
            --font: Montserrat, Roboto, Helvetica, Arial, sans-serif;
        }

        .wrapper {
            padding: 1.5rem 0;
            filter: url('#goo');
        }

        .exit {
            display: table-caption;
            text-align: center;
            background: var(--color);
            color: var(--bg);
            padding: 0.18em 1.32em 1.03em;
            line-height: 1;
            border-radius: 1em;
            position: relative;
            min-width: 4.3em;
            text-decoration: none;
            font-family: Marker Felt, fantasy;
            font-size: 1.55rem;
            left: -600%;
            height: 14px;
            margin-top: -37%;
            margin-bottom: 37%;
        }

            .exit:before,
            .exit:after {
                width: 4.4em;
                height: 2.45em;
                position: absolute;
                content: "";
                display: inline-block;
                background: var(--color);
                border-radius: 50%;
                transition: transform 1s ease;
                transform: scale(0);
                z-index: -1;
            }

            .exit:before {
                top: -25%;
                left: 20%;
            }

            .exit:after {
                bottom: -25%;
                right: 20%;
            }

            .exit:hover:before,
            .exit:hover:after {
                transform: none;
            }

    </style>
</head>

<body>
    <div class="container">
        <header>
            <h1>Memory Game</h1>
        </header>
        <div class="wrapper">
            <a class="exit" href="~/First/singleGames">Exit</a>
        </div>

        <!-- Filter: https://css-tricks.com/gooey-effect/ -->
        <svg style="visibility: hidden; position: absolute;" width="0" height="0" xmlns="http://www.w3.org/2000/svg" version="1.1">
            <defs>
                <filter id="goo">
                    <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
                    <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9" result="goo" />
                    <feComposite in="SourceGraphic" in2="goo" operator="atop" />
                </filter>
            </defs>
        </svg>
        <section class="score-panel">
            <ul class="stars">
                <li><i class="fa fa-star"></i></li>
                <li><i class="fa fa-star"></i></li>
                <li><i class="fa fa-star"></i></li>
            </ul>
            <span class="moves">0</span> Move(s)

            <div class="timer">
            </div>
            <div class="restart" onclick=startGame()>
                <i class="fa fa-repeat"></i>
            </div>
        </section>
        <ul class="deck" id="card-deck">
            <li class="card" type="plane">
                <i>/t</i>
            </li>
            <li class="card match" type="anchor">
                <i>%</i>
            </li>
            <li class="card" type="diamond">
                <i>/n</i>
            </li>
            <li class="card" type="plane">
                <i>tab</i>
            </li>
            <li class="card" type="leaf">
                <i>[ ]</i>
            </li>
            <li class="card" type="bicycle">
                <i> ++ </i>
            </li>
            <li class="card open show" type="bolt">
                <i>Function</i>
            </li>
            <li class="card" type="diamond">
                <i>New line</i>
            </li>
            <li class="card" type="bicycle">
                <i>Increment 1</i>
            </li>
            <li class="card" type="leaf">
                <i>Array</i>
            </li>
            <li class="card match" type="anchor">
                <i>Modulo</i>
            </li>
            <li class="card" type="bolt">
                <i>F(X)</i>
            </li>
        </ul>

        <div id="popup1" class="overlay">
            <div class="popup">
                <h2>Congratulations 🎉</h2>
                <a class="close" href="~/First/singleGames">×</a>
                <div class="content-1">
                    Congratulations you're a winner 🎉🎉
                </div>
                <div class="content-2">
                    <p>You made <span id="move"> </span> moves </p>
                    <p>in <span id=totalTime> </span> </p>
                    <p>Rating:  <span id=starRating></span></p>
                </div>
                <a class="button" type="submit" href="~/First/Matching3">
                    Next Level!
                </a>

            </div>
        </div>
    </div>
    <script>
                // cards array holds all cards
        let card = document.getElementsByClassName("card");
        let cards = [...card];

        // deck of all cards in game
        const deck = document.getElementById("card-deck");

        // declaring move variable
        let moves = 0;
        let counter = document.querySelector(".moves");

        // declare variables for star icons
        const stars = document.querySelectorAll(".fa-star");

        // declaring variable of matchedCards
        let matchedCard = document.getElementsByClassName("match");

        // stars list
        let starsList = document.querySelectorAll(".stars li");

        // close icon in modal
        let closeicon = document.querySelector(".close");

        // declare modal
        let modal = document.getElementById("popup1");

        // array for opened cards
        var openedCards = [];
        var score = 0;
        function shuffle(array) {
            var currentIndex = array.length, temporaryValue, randomIndex;

            while (currentIndex !== 0) {
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;
                temporaryValue = array[currentIndex];
                array[currentIndex] = array[randomIndex];
                array[randomIndex] = temporaryValue;
            }

            return array;
        }


        document.body.onload = startGame();

        function startGame() {
            // shuffle deck
            cards = shuffle(cards);
            // remove all exisiting classes from each card
            for (var i = 0; i < cards.length; i++) {
                deck.innerHTML = "";
                [].forEach.call(cards, function (item) {
                    deck.appendChild(item);
                });
                cards[i].classList.remove("show", "open", "match", "disabled");
            }
            // reset moves
            moves = 0;
            counter.innerHTML = moves;
            // reset rating
            for (var j = 0; j < stars.length; j++) {
                stars[j].style.color = "#FFD700";
                stars[j].style.visibility = "visible";
            }
            //reset timer
            second = 0;
            minute = 0;
            hour = 0;
            var timer = document.querySelector(".timer");
            timer.innerHTML = "0 mins 0 secs";
            clearInterval(interval);
        }


        var displayCard = function () {
            this.classList.toggle("open");
            this.classList.toggle("show");
            this.classList.toggle("disabled");
        };

        function cardOpen() {
            openedCards.push(this);
            var len = openedCards.length;
            if (len === 2) {
                moveCounter();
                if (openedCards[0].type === openedCards[1].type) {
                    matched();
                } else {
                    unmatched();
                }
            }
        };


        function matched() {
            openedCards[0].classList.add("match", "disabled");
            openedCards[1].classList.add("match", "disabled");
            openedCards[0].classList.remove("show", "open", "no-event");
            openedCards[1].classList.remove("show", "open", "no-event");
            openedCards = [];
        }


        // description when cards don't match
        function unmatched() {
            openedCards[0].classList.add("unmatched");
            openedCards[1].classList.add("unmatched");
            disable();
            setTimeout(function () {
                openedCards[0].classList.remove("show", "open", "no-event", "unmatched");
                openedCards[1].classList.remove("show", "open", "no-event", "unmatched");
                enable();
                openedCards = [];
            }, 1100);
        }



        function disable() {
            Array.prototype.filter.call(cards, function (card) {
                card.classList.add('disabled');
            });
        }


        function enable() {
            Array.prototype.filter.call(cards, function (card) {
                card.classList.remove('disabled');
                for (var i = 0; i < matchedCard.length; i++) {
                    matchedCard[i].classList.add("disabled");
                }
            });
        }


        function moveCounter() {
            moves++;
            counter.innerHTML = moves;
            //start timer on first click
            if (moves === 1) {
                second = 0;
                minute = 0;
                hour = 0;
                startTimer();
            }
            // setting rates based on moves
            if (moves > 8 && moves < 12) {
                for (i = 0; i < 3; i++) {
                    if (i > 1) {
                        stars[i].style.visibility = "collapse";
                    }
                }
            }
            else if (moves > 13) {
                for (i = 0; i < 3; i++) {
                    if (i > 0) {
                        stars[i].style.visibility = "collapse";
                    }
                }
            }
        }


        var second = 0, minute = 0; hour = 0;
        var timer = document.querySelector(".timer");
        var interval;
        function startTimer() {
            interval = setInterval(function () {
                timer.innerHTML = minute + " mins " + second + " secs";
                second++;
                if (second === 60) {
                    minute++;
                    second = 0;
                }
                if (minute === 60) {
                    hour++;
                    minute = 0;
                }
            }, 1000);
        }

        function congratulations() {
            if (matchedCard.length === 12) {
                clearInterval(interval);
                finalTime = timer.innerHTML;

                // show congratulations modal
                modal.classList.add("show");

                // declare star rating variable
                var starRating = document.querySelector(".stars").innerHTML;

                //showing move, rating, time on modal
                document.getElementById("move").innerHTML = moves;
                document.getElementById("starRating").innerHTML = starRating;
                document.getElementById("totalTime").innerHTML = finalTime;
                score = 40 - moves;
                var URl = '@Url.Action("matching2_result", "First")';
        
                $.ajax({
                url: URl,
                data: { id: score },
                success: function(data){
                //call is successfully completed and we got result in data
                },
                });
                //closeicon on modal
                closeModal();
            }
        }


        function closeModal() {
            closeicon.addEventListener("click", function (e) {
                modal.classList.remove("show");
                startGame();
            });
        }


        function playAgain() {
            modal.classList.remove("show");
            startGame();
        }


        // loop to add event listeners to each card
        for (var i = 0; i < cards.length; i++) {
            card = cards[i];
            card.addEventListener("click", displayCard);
            card.addEventListener("click", cardOpen);
            card.addEventListener("click", congratulations);
        }

       

    </script>
</body>
</html>
